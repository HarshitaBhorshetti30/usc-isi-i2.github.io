

@article{Knoblock:2008,
author = {Knoblock, Craig A and Ambite, Jose Luis and Carman, Mark and Michelson, Matthew and Szekely, Pedro and Tuchinda, Rattapoom},
title = {{Beyond the Elves: Making Intelligent Agents Intelligent}},
journal = {AI Magazine},
year = {2008},
volume = {29},
number = {2},
pages = {33--42},
rating = {0},
date-added = {2013-01-18T02:06:42GMT},
date-modified = {2013-05-02T16:22:57GMT},
Urlpaper = {http://www.isi.edu/integration/papers/knoblock08-aimag.pdf},
uri = {\url{papers2://publication/uuid/14582A90-50C5-4F6A-93A4-415C08497AA0}}
}

@inproceedings{Wiecha:2001,
author = {Wiecha, Charles and Szekely, Pedro},
title = {{Transforming the UI for anyone. anywhere: enabling an increased variety of users, devices, and tasks through interface transformations}},
booktitle = {Proceedings of ACM CHI 2001 Conference on Human Factors in Computing Systems},
year = {2001},
pages = {483--484},
rating = {0},
date-added = {2013-01-18T02:06:42GMT},
date-modified = {2013-05-02T16:22:57GMT},
abstract = {Historically, application and solution developers have confronted relatively simple and stable targeting problems. When designing applications and solutions, developers would identify and develop for a single dominant design point (or "sweet spot") - i.e., a targeted role (or business function), a targeted user, and a targeted hardware/software platform -- for the application. The Intemet and e-business transformation revolutions have made these targeting and .design problems much more challenging. Application and solution developers now confront several major and rapidly changing "variety challenges" that threaten their ability to develop, implement, and evolve high performance e-business solutions.},
Urlpaper = {http://www.isi.edu/~szekely/contents/papers/2001/transforming-ui-CHI2001-workshop.pdf},
uri = {\url{papers2://publication/uuid/8FEC128E-F26D-4946-B8F2-C3ADBEED6F29}}
}

@article{Szekely:1999b,
author = {Szekely, Pedro A and Thomas, Christoph G and Maybury, Mark T},
title = {{Editorial: IUI 99}},
journal = {Knowl.-Based Syst},
year = {1999},
volume = {12},
number = {8},
pages = {401--402},
rating = {0},
date-added = {2013-01-18T02:06:42GMT},
date-modified = {2013-05-02T16:22:57GMT},
Urlpaper = {http://dx.doi.org/10.1016/S0950-7051(99)00043-X},
uri = {\url{papers2://publication/uuid/DE9C6E72-A193-49E9-9CB9-F7255A30ECDC}}
}

@inproceedings{Puerta:1994,
author = {Puerta, Angel and Szekely, Pedro},
title = {{Model-Based Interface Development}},
booktitle = {Tutorial Notes, ACM CHI'94 Conference on Human Factors in Computing Systems},
year = {1994},
pages = {389--390},
rating = {0},
date-added = {2013-01-18T02:06:42GMT},
date-modified = {2013-05-02T16:22:57GMT},
abstract = {Model-based interface development is a new paradigm for developing interfaces that offers solutions to the main shortcomings of current tools. This paradigm is based on constructing a declarative description of how an interface should look and behave (model), and using the description to control the execution of an interface. This paper briefly summarizes the main shortcomings of interface development tools used today, discusses the main elements of the model-based approach, and closes with a discussion of the state of the art and the challenges that lie ahead.},
uri = {\url{papers2://publication/uuid/A69F3489-84FC-40FF-949B-B93DF4649A5A}}
}

@article{Szekely:1988:UCS:49103.1046414,
 author = {Szekely, Pedro},
 title = {Using Classification and Separation to Build Intelligent Interfaces},
 journal = {SIGCHI Bull.},
 issue_date = {July 1988},
 volume = {20},
 number = {1},
 month = jul,
 year = {1988},
 issn = {0736-6906},
 pages = {76--77},
 numpages = {2},
 url = {http://doi.acm.org/10.1145/49103.1046414},
 doi = {10.1145/49103.1046414},
 acmid = {1046414},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{Szekely:1988,
author = {Szekely, Pedro and Myers, Brad},
title = {{A user interface toolkit based on graphical objects and constraints}},
journal = {ACM SIGPLAN Notices},
year = {1988},
volume = {23},
number = {11},
pages = {36--45},
rating = {0},
date-added = {2013-01-18T02:06:42GMT},
date-modified = {2013-05-02T16:22:57GMT},
abstract = {One of the most difficult aspects of creating graphical, direct manipulation user interfaces is managing the relationships between the graphical objects on the screen and the application data structures that they represent. Coral (Constraint-based Object-oriented Relations And Language) is a new user interface toolkit under development that uses efficiently-implemented constraints to support these relationships. Using Coral, user interface designers can construct interaction techniques such as menus and scroll bars. More importantly, Coral makes it easy to construct direct-manipulation user interfaces specialized to particular applications. Unlike previous constraint-based toolkits, Coral supports defining constraints in the abstract, and then applying them to different object instances. In addition, it provides iteration constructs where lists of items (such as those used in menus) can be constrained as a group. Coral has two interfaces: a declarative interface that provides a convenient way to specify the desired constraints, and a procedural interface that will allow a graphical user interface management system (UIMS) to automatically create Coral calls.},
Urlpaper = {http://www.isi.edu/~szekely/contents/papers/1988/coral-toolkit-OOPSLA-1988.pdf},
uri = {\url{papers2://publication/uuid/CC7D1782-A761-4D98-95D0-4C3D9553716C}}
}

@article{Szekely:1987,
author = {Szekely, Pedro},
title = {{Modular implementation of presentations}},
journal = {SIGCHI Bull.},
year = {1987},
volume = {18},
number = {4},
pages = {235--240},
address = {New York, NY, USA},
publisher = {ACM},
doi = {http://doi.acm.org/10.1145/1165387.275636},
rating = {0},
date-added = {2013-01-18T02:06:42GMT},
date-modified = {2013-05-02T16:22:57GMT},
abstract = {The presentation of an application program specifies how the data and operations provided by an application are presented to users. Most traditional techniques for implementing presentations lead to unstructured, unmodular implementations that are hard to construct and change. We present a model of presentation that identifies the dependencies between the presentation and functionality portions of an application. Based on this model, we show how several implementation techniques can be used to construct presentations in a modular way.},
url = {http://doi.acm.org/10.1145/1165387.275636},
Urlpaper = {http://www.isi.edu/~szekely/contents/papers/1987/szekely87.pdf},
uri = {\url{papers2://publication/doi/http://doi.acm.org/10.1145/1165387.275636}}
}

@article{Szekely:1986,
author = {Szekely, Pedro},
title = {{Separating the user interface from the functionality of application programs}},
journal = {SIGCHI Bulletin},
year = {1986},
volume = {18},
number = {2},
month = oct,
publisher = { ACM},
doi = {10.1145/15683.15690},
language = {English},
rating = {0},
date-added = {2011-06-27T19:17:17GMT},
date-modified = {2013-05-02T16:22:57GMT},
abstract = {Constructing graphical user interfaces for interactive applications is a difficult and time consuming task, typically requiring extensive programming and experimentation with many prototypes. Thus, the ability to package portions of the specification of user interfaces into components that can be reused in the construction of many interfaces, and the ability to change an application's user interface without impacting the implementation of the functionality are crucial. These abilities can be realized in the measure that the dependencies between the implementation of an application's functionality and the user interface can be minimized.},
url = {http://portal.acm.org/citation.cfm?id=15683.15690&coll=DL&dl=ACM&CFID=31276417&CFTOKEN=57440068},
Urlpaper = {http://www.isi.edu/~szekely/contents/papers/1986/separating-ui-SIGCHI-1986.pdf},
uri = {\url{papers2://publication/doi/10.1145/15683.15690}}
}















